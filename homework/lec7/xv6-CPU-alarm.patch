diff --git a/Makefile b/Makefile
index b9e138a..233c2e3 100644
--- a/Makefile
+++ b/Makefile
@@ -160,6 +160,7 @@ mkfs: mkfs.c fs.h
 UPROGS=\
 	_cat\
 	_date\
+	_alarmtest\
 	_echo\
 	_forktest\
 	_grep\
diff --git a/alarmtest.c b/alarmtest.c
new file mode 100644
index 0000000..ddb5a8f
--- /dev/null
+++ b/alarmtest.c
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+void periodic();
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  printf(1, "alarmtest starting: %d\n", alarm(10, periodic));
+  for(i = 0; i < 500*500000; i++){
+    if((i++ % 500000) == 0)
+      write(2, ".", 1);
+  }
+  exit();
+}
+
+void
+periodic()
+{
+  printf(1, "alarm!\n");
+}
+
diff --git a/proc.h b/proc.h
index 7352805..d6cd0cd 100644
--- a/proc.h
+++ b/proc.h
@@ -63,6 +63,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int interval;                // Will be alarmed every interval ticks
+  int elapsedticks;                // Ticks passed since last call
+  void (* tick_handler)();          // Will be called every interval ticks
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index a2405fb..a89b4b8 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_alarm(void);
 extern int sys_date(void);
 
 static int (*syscalls[])(void) = {
@@ -115,6 +116,7 @@ static int (*syscalls[])(void) = {
 [SYS_sbrk]    sys_sbrk,
 [SYS_sleep]   sys_sleep,
 [SYS_uptime]  sys_uptime,
+[SYS_alarm]   sys_alarm,
 [SYS_date]    sys_date,
 [SYS_open]    sys_open,
 [SYS_write]   sys_write,
@@ -176,6 +178,9 @@ syscall(void)
     //  case SYS_uptime:
     //    cprintf("uptime -> ");
     //    break;
+    //  case SYS_alarm:
+    //    cprintf("allarm -> ");
+    //    break;
     //  case SYS_date:
     //    cprintf("date -> ");
     //    break;
diff --git a/syscall.h b/syscall.h
index 1a620b9..c32611f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_date   22
+#define SYS_alarm  23
diff --git a/sysproc.c b/sysproc.c
index 5183f85..5aa448d 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -103,3 +103,15 @@ sys_date(void)
   cmostime(r);
   return 0;
 }
+
+int
+sys_alarm(void)
+{
+  int interval;
+  void (* handler)();
+  if(argint(0, &interval) < 0 || argptr(1, (char **)&handler, sizeof(*handler)) < 0)
+    return -1;
+  proc->interval = interval;
+  proc->tick_handler = handler;
+  return 0;
+}
diff --git a/trap.c b/trap.c
index 6117a6a..6b12288 100644
--- a/trap.c
+++ b/trap.c
@@ -56,6 +56,16 @@ trap(struct trapframe *tf)
       wakeup(&ticks);
       release(&tickslock);
     }
+    if (proc && (tf->cs & DPL_USER) == DPL_USER && proc->interval > 0) {
+        //cprintf("trap: proc->interval %d, proc->tick_handler %x\n", proc->interval, proc->tick_handler);
+        proc->elapsedticks += 1;
+        if (proc->elapsedticks == proc->interval) {
+            proc->elapsedticks = 0;
+            tf->esp -= 4;
+            *(uint *) tf->esp = tf->eip;
+            tf->eip = (uint) proc->tick_handler;
+        }
+    }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
diff --git a/user.h b/user.h
index 1f62601..c298c34 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int date(struct rtcdate *);
+int alarm(int ticks, void (*handler)());
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index ba76d54..6762624 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(date)
+SYSCALL(alarm)
