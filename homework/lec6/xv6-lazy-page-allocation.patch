diff --git a/sysproc.c b/sysproc.c
index 28644ed..5183f85 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -51,7 +51,11 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = proc->sz;
-  if(growproc(n) < 0)
+  if (n > 0) {
+      proc->sz += n;
+      if(proc->sz > KERNBASE)
+        return -1;
+  } else if(growproc(n) < 0)
     return -1;
   return addr;
 }
diff --git a/trap.c b/trap.c
index e6b3784..6117a6a 100644
--- a/trap.c
+++ b/trap.c
@@ -14,6 +14,8 @@ extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
 
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
 void
 tvinit(void)
 {
@@ -86,6 +88,26 @@ trap(struct trapframe *tf)
               tf->trapno, cpunum(), tf->eip, rcr2());
       panic("trap");
     }
+    if (tf->trapno == T_PGFLT) {
+      uint pgflt_addr = rcr2();
+      uint a = PGROUNDDOWN(pgflt_addr);
+      if(a > KERNBASE) {
+          proc->killed = 1;
+          break;
+      }
+      char * mem = kalloc();
+      if(mem == 0){
+        cprintf("PGFLT out of memory\n");
+      } else {
+          memset(mem, 0, PGSIZE);
+          if(mappages(proc->pgdir, (char *)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+            cprintf("PGFLT out of memory\n");
+            kfree(mem);
+            proc->killed = 1;
+          }
+      }
+      break;
+    }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
             "eip 0x%x addr 0x%x--kill proc\n",
diff --git a/vm.c b/vm.c
index d9aaa7e..36e8629 100644
--- a/vm.c
+++ b/vm.c
@@ -66,7 +66,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
